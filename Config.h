#if !defined(_CONFIG_H_)
#define	_CONFIG_H_

//////////////////////////////////////////////////////////////////////////
// В файле Config.h находятся глобальные объявления, используемые в разных
// модулях проекта.
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// Частота процессора
//////////////////////////////////////////////////////////////////////////

#define MAIN_OSC	16000000UL // Arduino MEGA, Arduino UNO,Arduino NANO,
								// Arduino PRO MINI 5V
//#define MAIN_OSC	8000000UL // Arduino PRO MINI 3.3V или встроенный
								// RC-генератор 8МГц
#define DIVIDER_OSC	1	// Делитель частоты
//#define DIVIDER_OSC	2
//#define DIVIDER_OSC	4
//#define DIVIDER_OSC	8
//#define DIVIDER_OSC	16
//#define DIVIDER_OSC	32
//#define DIVIDER_OSC	64
//#define DIVIDER_OSC	128

#define F_CPU (MAIN_OSC / DIVIDER_OSC) // Частота процессора
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// Скорость UART.
// На основании BAUD препроцессор вычисляет константы UBRRH_VALUE,
// UBRRL_VALUE, USE_2X, необходимые для инициализации UART. Вычисления
// находятся в файле setbaud.h системной библиотеки Atmel Studio.
//////////////////////////////////////////////////////////////////////////
//#define BAUD	115200
//#define BAUD	57600
//#define BAUD	38400
//#define BAUD	19200
#define BAUD	9600
//#define BAUD	4800
//#define BAUD	2400
//#define BAUD	1200
//#define BAUD 600
//#define BAUD 300
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// Включаемые файлы, указанные в угловых скобках, находятся в папке
// c:\Program Files\Atmel\Atmel Toolchain\AVR8 GCC\Native\3.4.106\avr8-
// gnu-toolchain\avr\include
//////////////////////////////////////////////////////////////////////////
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/power.h>	// Работа с регистрами CLKPR, PRR
#include <string.h> // memcpy(), strcat(), strlen()
#include <stdio.h>

#define __PROG_TYPES_COMPAT__ // Для поддержки старых объявлений
								//типа prog_char

#include <avr/pgmspace.h> // Для строк во flash
#include <stdlib.h> // atoi(), abs()
#include <util/setbaud.h> // С помощью этого файла рассчитываются
						// константы UBRRH_VALUE и UBRRL_VALUE для UART

// Использовать расширение GCC "Labels as Values". 
// После этого можно переключать поток выполнения внутри оператора switch.
#define LC_INCLUDE "lc-addrlabels.h"

#include "pt\pt.h" // Библиотека Protothreads (Протопотоки)

#include "pin_macros.h" // Макросы DRIVER(), ON(), OFF(), CPL(), TOGGLE(),
						// CLR(), SET(), ACTIVE(), LATCH()




#define TRUE	1
#define FALSE	0




//////////////////////////////////////////////////////////////////////////
// Константы для работы с библиотекой Multitasking
//////////////////////////////////////////////////////////////////////////

// DRV_UART_TX и DRV_UART_RX представляют собой ID драйверов по передаче и
// приему байтов с помощью UART. Каждому драйверу должен быть присвоен
// уникальный номер, начиная от 0 и далее по порядку.
// Для каждого драйвера в библиотеке Multitasking резервируются данные.
#define DRV_UART_TX			0
#define DRV_UART_RX			1

// ID мьютекса для работы с АЦП.
// Каждому мьютексу должен быть присвоен уникальный номер, начиная от 0 и
// далее по порядку. Для каждого мьютекса в библиотеке Multitasking
// резервируются данные.
#define MUTEX_ADC			0


// ID таймаутов.
// Каждому таймауту должен быть присвоен уникальный номер, начиная от 0 и
// далее по порядку. Для каждого таймаута в библиотеке Multitasking
// резервируются данные.

// ID таймаута для обработки дребезга кнопки
#define TIMEOUT_DEBOUNCE	0	

// ID таймаута, используемого для управления светодиодом
#define TIMEOUT_HL			1




// Используемые порты микроконтроллера

#define HL		B,5,H	// Выв. 17. Порт B, бит 5, активный уровень H
						// (Светодиод)

#define SW		C,5,L	// Выв. 28. Порт C, бит 5, активный уровень L
						// (Кнопка)




// Объявление функции обратного вызова.
// Вызывается из обработчика прерываний системного таймера.
extern void CalcSec(void);

#endif
